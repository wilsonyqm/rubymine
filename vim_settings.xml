<application>
  <component name="VimSettings">
    <state version="4" enabled="true" />
    <globalmarks />
    <filemarks>
      <file name="$USER_HOME$/src/apm_bundle/apps/property/engines/screenings/test/decorators/screenings/decisions/deny_criminal_offense_rule_decorator_test.rb" timestamp="1515448374522">
        <mark key="[" line="15" column="32" />
        <mark key="]" line="15" column="33" />
        <mark key="." line="15" column="33" />
      </file>
      <file name="$USER_HOME$/src/apm_bundle/apps/property/engines/screenings/app/presenters/screenings/decisions/rule_result_cosigner_increase_deposit_presenter.rb" timestamp="1515452124946">
        <mark key="[" line="8" column="31" />
        <mark key="]" line="8" column="31" />
        <mark key="." line="8" column="31" />
      </file>
      <file name="/script.rb" timestamp="1515716278965" />
      <file name="$USER_HOME$/src/screenings_app/app/services/decisions/update_fuzzy_match_data_service.rb" timestamp="1515711377104">
        <mark key="[" line="6" column="44" />
        <mark key="]" line="6" column="58" />
      </file>
      <file name="$USER_HOME$/src/apm_bundle/apps/property/engines/screenings/app/views/screenings/decisions/criteria/rules/_eviction_judgements_time_frame_rule_new.html.erb" timestamp="1515448262963">
        <mark key="[" line="56" column="79" />
        <mark key="]" line="56" column="80" />
        <mark key="." line="56" column="80" />
      </file>
      <file name="$USER_HOME$/src/apm_bundle/apps/property/engines/screenings/test/decorators/screenings/decisions/bankruptcy_rule_decorator_test.rb" timestamp="1515441291958">
        <mark key="[" line="12" column="27" />
        <mark key="]" line="12" column="28" />
        <mark key="." line="12" column="28" />
      </file>
      <file name="$USER_HOME$/src/apm_bundle/apps/property/engines/screenings/test/decorators/screenings/decisions/accept_criminal_offense_rule_decorator_test.rb" timestamp="1515448483334">
        <mark key="[" line="15" column="36" />
        <mark key="]" line="15" column="37" />
        <mark key="." line="15" column="37" />
      </file>
      <file name="$USER_HOME$/src/apm_bundle/apps/property/engines/screenings/app/views/screenings/decisions/criteria/rules/criminals/_criminal_registry_rule_show.html.erb" timestamp="1515456602597">
        <mark key="[" line="20" column="85" />
        <mark key="]" line="20" column="86" />
        <mark key="." line="20" column="86" />
      </file>
      <file name="$USER_HOME$/src/apm_bundle/apps/property/engines/screenings/app/views/screenings/decisions/criteria/rules/_eviction_judgements_time_frame_rule_show.html.erb" timestamp="1515448288952">
        <mark key="[" line="23" column="83" />
        <mark key="]" line="23" column="84" />
        <mark key="." line="23" column="84" />
      </file>
      <file name="$USER_HOME$/src/apm_bundle/apps/property/engines/screenings/app/decorators/screenings/decisions/criminal_registry_rule_decorator.rb" timestamp="1515454512992">
        <mark key="[" line="5" column="80" />
        <mark key="]" line="5" column="81" />
        <mark key="." line="5" column="81" />
      </file>
      <file name="$USER_HOME$/src/apm_bundle/apps/property/engines/screenings/app/presenters/screenings/decisions/collection_rule_presenter.rb" timestamp="1515452102239">
        <mark key="[" line="25" column="18" />
        <mark key="]" line="25" column="18" />
        <mark key="." line="25" column="18" />
      </file>
      <file name="$USER_HOME$/src/screenings_app/config/decisions/criminal_offenses_20180110.csv" timestamp="1515716413711">
        <mark key="'" line="3642" column="108" />
        <mark key="[" line="0" column="77" />
        <mark key="]" line="0" column="84" />
        <mark key="." line="0" column="9" />
        <mark key="^" line="0" column="9" />
      </file>
      <file name="$USER_HOME$/src/apm_bundle/apps/property/engines/screenings/test/javascripts/screenings/decisions/criteria/new/component.spec.js" timestamp="1515192925699">
        <mark key="[" line="461" column="0" />
        <mark key="]" line="461" column="0" />
        <mark key="." line="461" column="0" />
      </file>
      <file name="$USER_HOME$/src/apm_bundle/apps/property/engines/screenings/app/views/screenings/decisions/criteria/rules/_income_to_rent_ratio_rule_show.html.erb" timestamp="1515451830747">
        <mark key="[" line="38" column="0" />
        <mark key="]" line="38" column="0" />
        <mark key="." line="38" column="0" />
      </file>
      <file name="$USER_HOME$/src/apm_bundle/apps/property/engines/screenings/app/presenters/screenings/decisions/bankruptcy_rule_presenter.rb" timestamp="1515452081117">
        <mark key="[" line="15" column="87" />
        <mark key="]" line="15" column="87" />
        <mark key="." line="15" column="87" />
      </file>
      <file name="$USER_HOME$/src/apm_bundle/apps/property/engines/screenings/test/presenters/screenings/decisions/collection_rule_presenter_test.rb" timestamp="1515452745778">
        <mark key="[" line="30" column="77" />
        <mark key="]" line="30" column="77" />
        <mark key="." line="30" column="77" />
      </file>
      <file name="$USER_HOME$/src/apm_bundle/apps/property/engines/screenings/test/helpers/screenings/decisions/criteria_helper_test.rb" timestamp="1515452709755">
        <mark key="[" line="58" column="77" />
        <mark key="]" line="58" column="77" />
        <mark key="." line="58" column="77" />
      </file>
      <file name="$USER_HOME$/src/apm_bundle/apps/property/engines/screenings/test/decorators/screenings/decisions/criminal_offense_rule_decorator_test.rb" timestamp="1515454381768">
        <mark key="[" line="26" column="40" />
        <mark key="]" line="26" column="41" />
        <mark key="." line="26" column="41" />
      </file>
      <file name="$USER_HOME$/src/screenings_app/config/decisions/criminal_offenses.csv" timestamp="1515712156353" />
      <file name="$USER_HOME$/src/apm_bundle/apps/property/engines/screenings/test/screenings/decisions/bankruptcy_terminology_mappings_test.rb" timestamp="1515448391857">
        <mark key="[" line="18" column="32" />
        <mark key="]" line="18" column="33" />
        <mark key="." line="18" column="33" />
      </file>
      <file name="$USER_HOME$/src/apm_bundle/apps/property/engines/screenings/app/views/screenings/decisions/criteria/rules/_minimum_credit_score_rule_new.html.erb" timestamp="1515448304357">
        <mark key="[" line="75" column="75" />
        <mark key="]" line="75" column="76" />
        <mark key="." line="75" column="76" />
      </file>
      <file name="$USER_HOME$/src/apm_bundle/apps/property/engines/screenings/test/decorators/screenings/decisions/eviction_judgements_time_frame_rule_decorator_test.rb" timestamp="1515454750545">
        <mark key="[" line="5" column="31" />
        <mark key="]" line="5" column="32" />
        <mark key="." line="5" column="32" />
      </file>
      <file name="$USER_HOME$/src/apm_bundle/apps/property/engines/screenings/app/models/screenings/decisions/collection_rule.rb" timestamp="1515102276732">
        <mark key="[" line="74" column="0" />
        <mark key="]" line="74" column="0" />
        <mark key="." line="74" column="0" />
      </file>
      <file name="$USER_HOME$/src/apm_bundle/apps/property/engines/screenings/app/presenters/screenings/decisions/eviction_judgements_time_frame_rule_presenter.rb" timestamp="1515452116737">
        <mark key="[" line="41" column="83" />
        <mark key="]" line="41" column="83" />
        <mark key="." line="41" column="83" />
      </file>
      <file name="$USER_HOME$/src/apm_bundle/apps/property/engines/screenings/test/decorators/screenings/decisions/partial_criminal_offense_rule_decorator_test.rb" timestamp="1515452693858">
        <mark key="[" line="31" column="69" />
        <mark key="]" line="31" column="69" />
        <mark key="." line="31" column="69" />
      </file>
      <file name="$USER_HOME$/src/apm_bundle/apps/property/engines/screenings/test/presenters/screenings/decisions/rule_summary_fail_presenter_test.rb" timestamp="1515455706688">
        <mark key="[" line="7" column="22" />
        <mark key="]" line="7" column="23" />
        <mark key="." line="7" column="23" />
      </file>
      <file name="$USER_HOME$/src/apm_bundle/apps/property/engines/screenings/app/decorators/screenings/decisions/bankruptcy_rule_decorator.rb" timestamp="1515441150726">
        <mark key="[" line="4" column="131" />
        <mark key="]" line="4" column="132" />
        <mark key="." line="4" column="132" />
      </file>
      <file name="$USER_HOME$/src/apm_bundle/apps/property/engines/screenings/app/decorators/screenings/decisions/eviction_judgements_time_frame_rule_decorator.rb" timestamp="1515454738345">
        <mark key="[" line="4" column="18" />
        <mark key="]" line="4" column="19" />
        <mark key="." line="4" column="19" />
      </file>
      <file name="$USER_HOME$/.rvm/gems/ruby-2.3.3/gems/simple_form-3.2.0/lib/simple_form/action_view_extensions/builder.rb" timestamp="1515103467702">
        <mark key="[" line="16" column="0" />
        <mark key="]" line="16" column="0" />
        <mark key="." line="16" column="0" />
      </file>
      <file name="$USER_HOME$/src/apm_bundle/apps/property/engines/screenings/app/views/screenings/decisions/criteria/rules/_collection_rule_new.html.erb" timestamp="1515448250375">
        <mark key="[" line="52" column="18" />
        <mark key="]" line="52" column="19" />
        <mark key="." line="52" column="19" />
      </file>
      <file name="$USER_HOME$/src/apm_bundle/apps/property/engines/screenings/lib/screenings/decisions/criminal_offense_terminology_mappings.rb" timestamp="1515454568050">
        <mark key="[" line="16" column="21" />
        <mark key="]" line="16" column="22" />
        <mark key="." line="16" column="22" />
      </file>
      <file name="$USER_HOME$/src/apm_bundle/apps/property/engines/screenings/test/presenters/screenings/decisions/criminal_registry_rule_presenter_test.rb" timestamp="1515448443184">
        <mark key="[" line="16" column="36" />
        <mark key="]" line="16" column="37" />
        <mark key="." line="16" column="37" />
      </file>
      <file name="$USER_HOME$/src/apm_bundle/apps/property/engines/screenings/app/decorators/screenings/decisions/minimum_credit_score_rule_decorator.rb" timestamp="1515441598089">
        <mark key="[" line="4" column="16" />
        <mark key="]" line="4" column="17" />
        <mark key="." line="4" column="17" />
      </file>
      <file name="$USER_HOME$/src/apm_bundle/apps/property/engines/screenings/test/screenings/decisions/criminal_offense_terminology_mappings_test.rb" timestamp="1515451330976">
        <mark key="[" line="16" column="37" />
        <mark key="]" line="16" column="38" />
        <mark key="." line="16" column="38" />
      </file>
      <file name="$USER_HOME$/src/screenings_app/lib/decisions/criminal_fuzzy_matcher.rb" timestamp="1515712627137">
        <mark key="'" line="54" column="11" />
        <mark key="[" line="50" column="0" />
        <mark key="]" line="82" column="6" />
        <mark key="^" line="35" column="33" />
        <mark key="." line="35" column="25" />
      </file>
      <file name="$USER_HOME$/src/apm_bundle/apps/property/engines/screenings/test/presenters/screenings/decisions/bankruptcy_rule_presenter_test.rb" timestamp="1515452726825">
        <mark key="[" line="23" column="73" />
        <mark key="]" line="23" column="73" />
        <mark key="." line="23" column="73" />
      </file>
      <file name="$USER_HOME$/src/apm_bundle/apps/property/engines/screenings/test/presenters/screenings/decisions/rule_result_manual_review_presenter_test.rb" timestamp="1515448489763">
        <mark key="[" line="12" column="36" />
        <mark key="]" line="12" column="37" />
        <mark key="." line="12" column="37" />
      </file>
      <file name="$USER_HOME$/src/apm_bundle/apps/property/engines/screenings/app/views/screenings/decisions/criteria/rules/criminals/_criminal_registry_rule_new.html.erb" timestamp="1515456607728">
        <mark key="[" line="51" column="79" />
        <mark key="]" line="51" column="80" />
        <mark key="." line="51" column="80" />
      </file>
      <file name="/Dummy.txt" timestamp="1515713594056">
        <mark key="[" line="0" column="0" />
        <mark key="]" line="0" column="0" />
        <mark key="." line="0" column="0" />
      </file>
      <file name="$USER_HOME$/src/screenings_app/config/decisions/script.rb" timestamp="1515716601909">
        <mark key="[" line="32" column="10" />
        <mark key="]" line="32" column="10" />
        <mark key="." line="32" column="10" />
        <mark key="^" line="32" column="10" />
      </file>
      <file name="$USER_HOME$/src/apm_bundle/apps/property/engines/screenings/test/presenters/screenings/decisions/criminal_offense_rule_presenter_test.rb" timestamp="1515453569648">
        <mark key="[" line="30" column="0" />
        <mark key="]" line="30" column="0" />
        <mark key="." line="30" column="0" />
      </file>
      <file name="$USER_HOME$/src/screenings_app/lib/decisions/criminal_offense_classifier.rb" timestamp="1515625166391">
        <mark key="'" line="40" column="8" />
      </file>
      <file name="$USER_HOME$/src/screenings_app/lib/decisions/classifiers/bankruptcy_classifier.rb" timestamp="1515713593793">
        <mark key="[" line="36" column="0" />
        <mark key="]" line="36" column="0" />
        <mark key="." line="36" column="0" />
        <mark key="^" line="36" column="70" />
      </file>
      <file name="$USER_HOME$/src/screenings_app/lib/decisions/criminal_registry_classifier.rb" timestamp="1515707507105">
        <mark key="[" line="6" column="76" />
        <mark key="]" line="6" column="76" />
        <mark key="^" line="6" column="103" />
        <mark key="." line="6" column="76" />
      </file>
      <file name="$USER_HOME$/src/screenings_app/config/decisions/felony_criminal_type_to_rule_name.yml" timestamp="1515716845821">
        <mark key="'" line="0" column="0" />
        <mark key="[" line="1000" column="0" />
        <mark key="]" line="5536" column="39" />
        <mark key="." line="1000" column="0" />
        <mark key="^" line="510" column="51" />
      </file>
      <file name="$USER_HOME$/src/apm_bundle/apps/property/engines/screenings/test/screenings/decisions/low_confidence_offense_description_creator_test.rb" timestamp="1515451308103">
        <mark key="[" line="109" column="53" />
        <mark key="]" line="109" column="54" />
        <mark key="." line="109" column="54" />
      </file>
      <file name="$USER_HOME$/src/screenings_app/test/unit/decisions/decisions_makers/criminal_decision_maker_test.rb" timestamp="1515628063416">
        <mark key="[" line="234" column="69" />
        <mark key="]" line="234" column="85" />
        <mark key="^" line="234" column="85" />
        <mark key="." line="234" column="85" />
      </file>
      <file name="$USER_HOME$/src/apm_bundle/apps/property/engines/screenings/app/presenters/screenings/decisions/rule_result_manual_review_presenter.rb" timestamp="1515448449964">
        <mark key="[" line="8" column="23" />
        <mark key="]" line="8" column="24" />
        <mark key="." line="8" column="24" />
      </file>
      <file name="$USER_HOME$/src/apm_bundle/apps/property/engines/screenings/app/views/screenings/decisions/criteria/rules/_income_to_rent_ratio_rule_new.html.erb" timestamp="1515454360975">
        <mark key="[" line="67" column="0" />
        <mark key="]" line="67" column="0" />
        <mark key="." line="67" column="0" />
      </file>
      <file name="$USER_HOME$/src/apm_bundle/apps/property/engines/screenings/app/presenters/screenings/decisions/criminal_registry_rule_presenter.rb" timestamp="1515448355179">
        <mark key="[" line="7" column="24" />
        <mark key="]" line="7" column="25" />
        <mark key="." line="7" column="25" />
      </file>
      <file name="$USER_HOME$/src/apm_bundle/apps/property/engines/screenings/test/decorators/screenings/decisions/criminal_registry_rule_decorator_test.rb" timestamp="1515454551396">
        <mark key="[" line="31" column="36" />
        <mark key="]" line="31" column="37" />
        <mark key="." line="31" column="37" />
      </file>
      <file name="$USER_HOME$/src/screenings_app/config/decisions/felony_criminal_type_to_rule_name_20180110.yml" timestamp="1515716624607">
        <mark key="[" line="1" column="0" />
        <mark key="]" line="4537" column="38" />
      </file>
      <file name="$USER_HOME$/src/screenings_app/config/decisions/database_name.csv" timestamp="1515623113400">
        <mark key="[" line="1" column="54" />
        <mark key="]" line="1" column="52" />
        <mark key="." line="1" column="52" />
        <mark key="^" line="1" column="52" />
      </file>
      <file name="$USER_HOME$/src/screenings_app/lib/decisions/classifiers/criminal_offense_classifier.rb" timestamp="1515695046457">
        <mark key="'" line="26" column="9" />
      </file>
      <file name="$USER_HOME$/src/screenings_app/lib/decisions/classifiers/criminal_registry_classifier.rb" timestamp="1515707517724">
        <mark key="'" line="6" column="6" />
        <mark key="[" line="7" column="75" />
        <mark key="]" line="7" column="102" />
        <mark key="^" line="7" column="74" />
        <mark key="." line="7" column="75" />
      </file>
    </filemarks>
    <jumps>
      <jump line="48" column="11" filename="$USER_HOME$/src/apm_bundle/apps/property/engines/screenings/app/forms/screenings/decisions/criterion_form.rb" />
      <jump line="58" column="67" filename="$USER_HOME$/src/apm_bundle/apps/property/engines/screenings/app/forms/screenings/decisions/criterion_form.rb" />
      <jump line="59" column="83" filename="$USER_HOME$/src/apm_bundle/apps/property/engines/screenings/app/forms/screenings/decisions/criterion_form.rb" />
      <jump line="173" column="9" filename="$USER_HOME$/src/apm_bundle/apps/property/engines/screenings/app/forms/screenings/decisions/criterion_form.rb" />
      <jump line="743" column="38" filename="$USER_HOME$/src/apm_bundle/apps/property/engines/screenings/test/forms/screenings/decisions/criterion_form_test.rb" />
      <jump line="1055" column="38" filename="$USER_HOME$/src/apm_bundle/apps/property/engines/screenings/test/forms/screenings/decisions/criterion_form_test.rb" />
      <jump line="1058" column="44" filename="$USER_HOME$/src/apm_bundle/apps/property/engines/screenings/test/forms/screenings/decisions/criterion_form_test.rb" />
      <jump line="1060" column="48" filename="$USER_HOME$/src/apm_bundle/apps/property/engines/screenings/test/forms/screenings/decisions/criterion_form_test.rb" />
      <jump line="1061" column="95" filename="$USER_HOME$/src/apm_bundle/apps/property/engines/screenings/test/forms/screenings/decisions/criterion_form_test.rb" />
      <jump line="1062" column="25" filename="$USER_HOME$/src/apm_bundle/apps/property/engines/screenings/test/forms/screenings/decisions/criterion_form_test.rb" />
      <jump line="1063" column="25" filename="$USER_HOME$/src/apm_bundle/apps/property/engines/screenings/test/forms/screenings/decisions/criterion_form_test.rb" />
      <jump line="1064" column="25" filename="$USER_HOME$/src/apm_bundle/apps/property/engines/screenings/test/forms/screenings/decisions/criterion_form_test.rb" />
      <jump line="310" column="50" filename="$USER_HOME$/src/apm_bundle/apps/property/engines/screenings/test/forms/screenings/decisions/criterion_form_test.rb" />
      <jump line="536" column="8" filename="$USER_HOME$/src/apm_bundle/apps/property/engines/screenings/test/forms/screenings/decisions/criterion_form_test.rb" />
      <jump line="614" column="0" filename="$USER_HOME$/src/apm_bundle/apps/property/engines/screenings/test/forms/screenings/decisions/criterion_form_test.rb" />
      <jump line="657" column="8" filename="$USER_HOME$/src/apm_bundle/apps/property/engines/screenings/test/forms/screenings/decisions/criterion_form_test.rb" />
      <jump line="612" column="8" filename="$USER_HOME$/src/apm_bundle/apps/property/engines/screenings/test/forms/screenings/decisions/criterion_form_test.rb" />
      <jump line="387" column="6" filename="$USER_HOME$/src/apm_bundle/apps/property/engines/screenings/test/forms/screenings/decisions/criterion_form_test.rb" />
      <jump line="191" column="14" filename="$USER_HOME$/src/apm_bundle/apps/property/engines/screenings/test/controllers/screenings/decisions/criteria_controller_test.rb" />
      <jump line="612" column="48" filename="$USER_HOME$/src/apm_bundle/apps/property/engines/screenings/test/controllers/screenings/decisions/criteria_controller_test.rb" />
      <jump line="164" column="9" filename="$USER_HOME$/src/apm_bundle/apps/property/engines/screenings/app/forms/screenings/decisions/criterion_form.rb" />
      <jump line="46" column="10" filename="$USER_HOME$/src/apm_bundle/apps/property/engines/screenings/app/forms/screenings/decisions/criminal_offense_rules_form.rb" />
      <jump line="40" column="10" filename="$USER_HOME$/src/apm_bundle/apps/property/engines/screenings/app/forms/screenings/decisions/criminal_offense_rules_form.rb" />
      <jump line="40" column="9" filename="$USER_HOME$/src/apm_bundle/apps/property/engines/screenings/app/forms/screenings/decisions/criterion_form.rb" />
      <jump line="47" column="11" filename="$USER_HOME$/src/apm_bundle/apps/property/engines/screenings/app/forms/screenings/decisions/criterion_form.rb" />
      <jump line="56" column="62" filename="$USER_HOME$/src/apm_bundle/apps/property/engines/screenings/app/forms/screenings/decisions/criterion_form.rb" />
      <jump line="57" column="78" filename="$USER_HOME$/src/apm_bundle/apps/property/engines/screenings/app/forms/screenings/decisions/criterion_form.rb" />
      <jump line="105" column="52" filename="$USER_HOME$/src/apm_bundle/apps/property/engines/screenings/test/forms/screenings/decisions/criterion_form_criminal_offense_rules_test.rb" />
      <jump line="76" column="21" filename="$USER_HOME$/src/apm_bundle/apps/property/engines/screenings/test/forms/screenings/decisions/criterion_form_criminal_offense_rules_test.rb" />
      <jump line="103" column="52" filename="$USER_HOME$/src/apm_bundle/apps/property/engines/screenings/test/forms/screenings/decisions/criterion_form_criminal_offense_rules_test.rb" />
      <jump line="75" column="52" filename="$USER_HOME$/src/apm_bundle/apps/property/engines/screenings/test/forms/screenings/decisions/criterion_form_criminal_offense_rules_test.rb" />
      <jump line="52" column="52" filename="$USER_HOME$/src/apm_bundle/apps/property/engines/screenings/test/forms/screenings/decisions/criterion_form_criminal_offense_rules_test.rb" />
      <jump line="28" column="60" filename="$USER_HOME$/src/apm_bundle/apps/property/engines/screenings/test/forms/screenings/decisions/criterion_form_criminal_offense_rules_test.rb" />
      <jump line="20" column="0" filename="$USER_HOME$/src/apm_bundle/apps/property/engines/screenings/test/forms/screenings/decisions/criterion_form_criminal_offense_rules_test.rb" />
      <jump line="304" column="52" filename="$USER_HOME$/src/apm_bundle/apps/property/engines/screenings/test/forms/screenings/decisions/criterion_form_criminal_offense_rules_test.rb" />
      <jump line="275" column="52" filename="$USER_HOME$/src/apm_bundle/apps/property/engines/screenings/test/forms/screenings/decisions/criterion_form_criminal_offense_rules_test.rb" />
      <jump line="252" column="52" filename="$USER_HOME$/src/apm_bundle/apps/property/engines/screenings/test/forms/screenings/decisions/criterion_form_criminal_offense_rules_test.rb" />
      <jump line="227" column="60" filename="$USER_HOME$/src/apm_bundle/apps/property/engines/screenings/test/forms/screenings/decisions/criterion_form_criminal_offense_rules_test.rb" />
      <jump line="13" column="19" filename="$USER_HOME$/src/apm_bundle/apps/property/engines/screenings/config/locales/en.yml" />
      <jump line="31" column="9" filename="$USER_HOME$/src/apm_bundle/apps/property/engines/screenings/config/locales/en.yml" />
      <jump line="33" column="78" filename="$USER_HOME$/src/apm_bundle/apps/property/engines/screenings/config/locales/en.yml" />
      <jump line="15" column="39" filename="$USER_HOME$/src/apm_bundle/apps/property/engines/screenings/config/locales/en.yml" />
      <jump line="106" column="10" filename="$USER_HOME$/src/apm_bundle/apps/property/engines/screenings/app/helpers/screenings/decisions/criteria_helper.rb" />
      <jump line="83" column="0" filename="$USER_HOME$/src/apm_bundle/apps/property/engines/screenings/app/helpers/screenings/decisions/criteria_helper.rb" />
      <jump line="95" column="145" filename="$USER_HOME$/src/apm_bundle/apps/property/engines/screenings/app/helpers/screenings/decisions/criteria_helper.rb" />
      <jump line="66" column="0" filename="$USER_HOME$/src/apm_bundle/apps/property/engines/screenings/test/presenters/screenings/decisions/eviction_judgements_time_frame_rule_presenter_test.rb" />
      <jump line="9" column="8" filename="$USER_HOME$/src/apm_bundle/apps/property/engines/screenings/test/presenters/screenings/decisions/rule_result_cosigner_increase_deposit_presenter_test.rb" />
      <jump line="9" column="8" filename="$USER_HOME$/src/apm_bundle/apps/property/engines/screenings/test/presenters/screenings/decisions/rule_result_cosigner_presenter_test.rb" />
      <jump line="9" column="8" filename="$USER_HOME$/src/apm_bundle/apps/property/engines/screenings/test/presenters/screenings/decisions/rule_result_increase_deposit_presenter_test.rb" />
      <jump line="77" column="0" filename="$USER_HOME$/src/apm_bundle/apps/property/engines/screenings/test/presenters/screenings/decisions/rule_result_fail_presenter_test.rb" />
      <jump line="12" column="22" filename="$USER_HOME$/src/apm_bundle/apps/property/engines/screenings/test/presenters/screenings/decisions/rule_result_fail_presenter_test.rb" />
      <jump line="40" column="8" filename="$USER_HOME$/src/screenings_app/lib/decisions/criminal_offense_classifier.rb" />
      <jump line="103" column="95" filename="$USER_HOME$/src/screenings_app/config/decisions/criminal_offenses_20180110.csv" />
      <jump line="3642" column="108" filename="$USER_HOME$/src/screenings_app/config/decisions/criminal_offenses_20180110.csv" />
      <jump line="67" column="11" filename="$USER_HOME$/src/screenings_app/lib/decisions/classifiers/criminal_offense_classifier.rb" />
      <jump line="17" column="19" filename="$USER_HOME$/src/screenings_app/lib/decisions/classifiers/criminal_offense_classifier.rb" />
      <jump line="26" column="9" filename="$USER_HOME$/src/screenings_app/lib/decisions/classifiers/criminal_offense_classifier.rb" />
      <jump line="638" column="45" filename="$USER_HOME$/src/screenings_app/config/decisions/felony_criminal_type_to_rule_name.yml" />
      <jump line="640" column="39" filename="$USER_HOME$/src/screenings_app/config/decisions/felony_criminal_type_to_rule_name.yml" />
      <jump line="708" column="25" filename="$USER_HOME$/src/screenings_app/config/decisions/felony_criminal_type_to_rule_name.yml" />
      <jump line="724" column="27" filename="$USER_HOME$/src/screenings_app/config/decisions/felony_criminal_type_to_rule_name.yml" />
      <jump line="783" column="27" filename="$USER_HOME$/src/screenings_app/config/decisions/felony_criminal_type_to_rule_name.yml" />
      <jump line="930" column="30" filename="$USER_HOME$/src/screenings_app/config/decisions/felony_criminal_type_to_rule_name.yml" />
      <jump line="949" column="20" filename="$USER_HOME$/src/screenings_app/config/decisions/felony_criminal_type_to_rule_name.yml" />
      <jump line="953" column="30" filename="$USER_HOME$/src/screenings_app/config/decisions/felony_criminal_type_to_rule_name.yml" />
      <jump line="980" column="18" filename="$USER_HOME$/src/screenings_app/config/decisions/felony_criminal_type_to_rule_name.yml" />
      <jump line="996" column="21" filename="$USER_HOME$/src/screenings_app/config/decisions/felony_criminal_type_to_rule_name.yml" />
      <jump line="1002" column="9" filename="$USER_HOME$/src/screenings_app/config/decisions/felony_criminal_type_to_rule_name.yml" />
      <jump line="1006" column="7" filename="$USER_HOME$/src/screenings_app/config/decisions/felony_criminal_type_to_rule_name.yml" />
      <jump line="1007" column="10" filename="$USER_HOME$/src/screenings_app/config/decisions/felony_criminal_type_to_rule_name.yml" />
      <jump line="1009" column="10" filename="$USER_HOME$/src/screenings_app/config/decisions/felony_criminal_type_to_rule_name.yml" />
      <jump line="1057" column="10" filename="$USER_HOME$/src/screenings_app/config/decisions/felony_criminal_type_to_rule_name.yml" />
      <jump line="1058" column="31" filename="$USER_HOME$/src/screenings_app/config/decisions/felony_criminal_type_to_rule_name.yml" />
      <jump line="1309" column="19" filename="$USER_HOME$/src/screenings_app/config/decisions/felony_criminal_type_to_rule_name.yml" />
      <jump line="1314" column="34" filename="$USER_HOME$/src/screenings_app/config/decisions/felony_criminal_type_to_rule_name.yml" />
      <jump line="1592" column="29" filename="$USER_HOME$/src/screenings_app/config/decisions/felony_criminal_type_to_rule_name.yml" />
      <jump line="1767" column="24" filename="$USER_HOME$/src/screenings_app/config/decisions/felony_criminal_type_to_rule_name.yml" />
      <jump line="1903" column="52" filename="$USER_HOME$/src/screenings_app/config/decisions/felony_criminal_type_to_rule_name.yml" />
      <jump line="1923" column="22" filename="$USER_HOME$/src/screenings_app/config/decisions/felony_criminal_type_to_rule_name.yml" />
      <jump line="1942" column="41" filename="$USER_HOME$/src/screenings_app/config/decisions/felony_criminal_type_to_rule_name.yml" />
      <jump line="1968" column="28" filename="$USER_HOME$/src/screenings_app/config/decisions/felony_criminal_type_to_rule_name.yml" />
      <jump line="2010" column="27" filename="$USER_HOME$/src/screenings_app/config/decisions/felony_criminal_type_to_rule_name.yml" />
      <jump line="2011" column="6" filename="$USER_HOME$/src/screenings_app/config/decisions/felony_criminal_type_to_rule_name.yml" />
      <jump line="2043" column="40" filename="$USER_HOME$/src/screenings_app/config/decisions/felony_criminal_type_to_rule_name.yml" />
      <jump line="2052" column="30" filename="$USER_HOME$/src/screenings_app/config/decisions/felony_criminal_type_to_rule_name.yml" />
      <jump line="2067" column="45" filename="$USER_HOME$/src/screenings_app/config/decisions/felony_criminal_type_to_rule_name.yml" />
      <jump line="2120" column="52" filename="$USER_HOME$/src/screenings_app/config/decisions/felony_criminal_type_to_rule_name.yml" />
      <jump line="2245" column="26" filename="$USER_HOME$/src/screenings_app/config/decisions/felony_criminal_type_to_rule_name.yml" />
      <jump line="6" column="6" filename="$USER_HOME$/src/screenings_app/lib/decisions/classifiers/criminal_registry_classifier.rb" />
      <jump line="14" column="22" filename="$USER_HOME$/src/screenings_app/lib/decisions/criminal_fuzzy_matcher.rb" />
      <jump line="894" column="55" filename="$USER_HOME$/src/screenings_app/config/decisions/felony_criminal_type_to_rule_name.yml" />
      <jump line="510" column="18" filename="$USER_HOME$/src/screenings_app/config/decisions/felony_criminal_type_to_rule_name.yml" />
      <jump line="644" column="18" filename="$USER_HOME$/src/screenings_app/config/decisions/felony_criminal_type_to_rule_name.yml" />
      <jump line="834" column="18" filename="$USER_HOME$/src/screenings_app/config/decisions/felony_criminal_type_to_rule_name.yml" />
      <jump line="3389" column="41" filename="$USER_HOME$/src/screenings_app/config/decisions/felony_criminal_type_to_rule_name.yml" />
      <jump line="3" column="8" filename="$USER_HOME$/src/screenings_app/lib/decisions/criminal_fuzzy_matcher.rb" />
      <jump line="50" column="67" filename="$USER_HOME$/src/screenings_app/lib/decisions/criminal_fuzzy_matcher.rb" />
      <jump line="54" column="11" filename="$USER_HOME$/src/screenings_app/lib/decisions/criminal_fuzzy_matcher.rb" />
      <jump line="1680" column="0" filename="$USER_HOME$/src/screenings_app/config/decisions/felony_criminal_type_to_rule_name.yml" />
      <jump line="0" column="0" filename="$USER_HOME$/src/screenings_app/config/decisions/felony_criminal_type_to_rule_name.yml" />
    </jumps>
    <registers>
      <register name="a" type="2">
        <text encoding="base64">ICAgICAgZGVmIHRlc3RfaW5pdGlhbGl6ZV9jcmltaW5hbF9ydWxlc19fc2luZ2xlX19mZWxvbnlfX3dpdGhvdXRfY2hlY2tib3hfX3ZhbGlkCiAgICAgICAgcGFyYW1zID0gYmFzaWNfZm9ybV9wYXJhbXMubWVyZ2UoCiAgICAgICAgICBmZWxvbnlfY3JpbWluYWxfb2ZmZW5zZV9ydWxlX3BhcnRpYWxzX2F0dHJpYnV0ZXM6IHsKICAgICAgICAgICAgJzAnID0+IHsKICAgICAgICAgICAgICBkZWNpc2lvbl90eXBlOiAnYWNjZXB0JywKICAgICAgICAgICAgICBvZmZlbnNlX3J1bGVfdHlwZTogJ3NleHVhbF9vZmZlbnNlX3J1bGUnLAogICAgICAgICAgICAgIHZhbHVlOiAzCiAgICAgICAgICAgIH0KICAgICAgICAgIH0sCiAgICAgICAgICBmZWxvbmllc19jaGVja2JveDogJzAnCiAgICAgICAgKQogICAgICAgIGZvcm0gPSBTY3JlZW5pbmdzOjpEZWNpc2lvbnM6OkNyaXRlcmlvbkZvcm0ubmV3X2Zyb21fcGFyYW1zKHBhcmFtcykKCiAgICAgICAgYXNzZXJ0X3ByZWRpY2F0ZSBmb3JtLCA6dmFsaWQ/CgogICAgICAgIGFzc2VydF9kaWZmZXJlbmNlICdTY3JlZW5pbmdzOjpEZWNpc2lvbnM6OkNyaXRlcmlvbi5jb3VudCcsIDEgZG8KICAgICAgICAgIGFzc2VydF9kaWZmZXJlbmNlICdTY3JlZW5pbmdzOjpEZWNpc2lvbnM6OlJ1bGUuY291bnQnLCAyIGRvCiAgICAgICAgICAgIGFzc2VydF9kaWZmZXJlbmNlICdTY3JlZW5pbmdzOjpEZWNpc2lvbnM6OkNyaW1pbmFsT2ZmZW5zZVJ1bGUuY291bnQnLCAwIGRvCiAgICAgICAgICAgICAgZm9ybS5zYXZlIQogICAgICAgICAgICBlbmQKICAgICAgICAgIGVuZAogICAgICAgIGVuZAogICAgICBlbmQKCiAgICAgIGRlZiB0ZXN0X2luaXRpYWxpemVfY3JpbWluYWxfcnVsZXNfX3NpbmdsZV9fZmVsb255X193aXRob3V0X2NoZWNrYm94X19pbnZhbGlkCiAgICAgICAgcGFyYW1zID0gYmFzaWNfZm9ybV9wYXJhbXMubWVyZ2UoCiAgICAgICAgICBmZWxvbnlfY3JpbWluYWxfb2ZmZW5zZV9ydWxlX3BhcnRpYWxzX2F0dHJpYnV0ZXM6IHsKICAgICAgICAgICAgJzAnID0+IHsKICAgICAgICAgICAgICBkZWNpc2lvbl90eXBlOiAnYWNjZXB0JywKICAgICAgICAgICAgICB2YWx1ZTogMwogICAgICAgICAgICB9CiAgICAgICAgICB9LAogICAgICAgICAgZmVsb25pZXNfY2hlY2tib3g6ICcwJwogICAgICAgICkKICAgICAgICBmb3JtID0gU2NyZWVuaW5nczo6RGVjaXNpb25zOjpDcml0ZXJpb25Gb3JtLm5ld19mcm9tX3BhcmFtcyhwYXJhbXMpCgogICAgICAgIGFzc2VydF9wcmVkaWNhdGUgZm9ybSwgOnZhbGlkPwoKICAgICAgICBhc3NlcnRfZGlmZmVyZW5jZSAnU2NyZWVuaW5nczo6RGVjaXNpb25zOjpDcml0ZXJpb24uY291bnQnLCAxIGRvCiAgICAgICAgICBhc3NlcnRfZGlmZmVyZW5jZSAnU2NyZWVuaW5nczo6RGVjaXNpb25zOjpSdWxlLmNvdW50JywgMiBkbwogICAgICAgICAgICBhc3NlcnRfZGlmZmVyZW5jZSAnU2NyZWVuaW5nczo6RGVjaXNpb25zOjpDcmltaW5hbE9mZmVuc2VSdWxlLmNvdW50JywgMCBkbwogICAgICAgICAgICAgIGZvcm0uc2F2ZSEKICAgICAgICAgICAgZW5kCiAgICAgICAgICBlbmQKICAgICAgICBlbmQKICAgICAgZW5kCg==</text>
      </register>
      <register name="&quot;" type="2">
        <text encoding="base64"></text>
      </register>
      <register name="b" type="2">
        <text encoding="base64">ICAgICAgZGVmIHRlc3RfaW5pdGlhbGl6ZV9jcmltaW5hbF9ydWxlc19fc2luZ2xlX19taXNkZW1lYW5vcl9fd2l0aG91dF9jaGVja2JveF9fdmFsaWQKICAgICAgICBwYXJhbXMgPSBiYXNpY19mb3JtX3BhcmFtcy5tZXJnZSgKICAgICAgICAgIG1pc2RlbWVhbm9yX2NyaW1pbmFsX29mZmVuc2VfcnVsZV9wYXJ0aWFsc19hdHRyaWJ1dGVzOiB7CiAgICAgICAgICAgICcwJyA9PiB7CiAgICAgICAgICAgICAgZGVjaXNpb25fdHlwZTogJ2FjY2VwdCcsCiAgICAgICAgICAgICAgb2ZmZW5zZV9ydWxlX3R5cGU6ICdzZXh1YWxfb2ZmZW5zZV9ydWxlJywKICAgICAgICAgICAgICB2YWx1ZTogMwogICAgICAgICAgICB9CiAgICAgICAgICB9LAogICAgICAgICAgbWlzZGVtZWFub3JzX2NoZWNrYm94OiAnMCcKICAgICAgICApCiAgICAgICAgZm9ybSA9IFNjcmVlbmluZ3M6OkRlY2lzaW9uczo6Q3JpdGVyaW9uRm9ybS5uZXdfZnJvbV9wYXJhbXMocGFyYW1zKQoKICAgICAgICBhc3NlcnRfcHJlZGljYXRlIGZvcm0sIDp2YWxpZD8KCiAgICAgICAgYXNzZXJ0X2RpZmZlcmVuY2UgJ1NjcmVlbmluZ3M6OkRlY2lzaW9uczo6Q3JpdGVyaW9uLmNvdW50JywgMSBkbwogICAgICAgICAgYXNzZXJ0X2RpZmZlcmVuY2UgJ1NjcmVlbmluZ3M6OkRlY2lzaW9uczo6UnVsZS5jb3VudCcsIDIgZG8KICAgICAgICAgICAgYXNzZXJ0X2RpZmZlcmVuY2UgJ1NjcmVlbmluZ3M6OkRlY2lzaW9uczo6Q3JpbWluYWxPZmZlbnNlUnVsZS5jb3VudCcsIDAgZG8KICAgICAgICAgICAgICBmb3JtLnNhdmUhCiAgICAgICAgICAgIGVuZAogICAgICAgICAgZW5kCiAgICAgICAgZW5kCiAgICAgIGVuZAoKICAgICAgZGVmIHRlc3RfaW5pdGlhbGl6ZV9jcmltaW5hbF9ydWxlc19fc2luZ2xlX19taXNkZW1lYW5vcl9fd2l0aG91dF9jaGVja2JveF9faW52YWxpZAogICAgICAgIHBhcmFtcyA9IGJhc2ljX2Zvcm1fcGFyYW1zLm1lcmdlKAogICAgICAgICAgbWlzZGVtZWFub3JfY3JpbWluYWxfb2ZmZW5zZV9ydWxlX3BhcnRpYWxzX2F0dHJpYnV0ZXM6IHsKICAgICAgICAgICAgJzAnID0+IHsKICAgICAgICAgICAgICBkZWNpc2lvbl90eXBlOiAnYWNjZXB0JywKICAgICAgICAgICAgICB2YWx1ZTogMwogICAgICAgICAgICB9CiAgICAgICAgICB9LAogICAgICAgICAgbWlzZGVtZWFub3JzX2NoZWNrYm94OiAnMCcKICAgICAgICApCiAgICAgICAgZm9ybSA9IFNjcmVlbmluZ3M6OkRlY2lzaW9uczo6Q3JpdGVyaW9uRm9ybS5uZXdfZnJvbV9wYXJhbXMocGFyYW1zKQoKICAgICAgICBhc3NlcnRfcHJlZGljYXRlIGZvcm0sIDp2YWxpZD8KCiAgICAgICAgYXNzZXJ0X2RpZmZlcmVuY2UgJ1NjcmVlbmluZ3M6OkRlY2lzaW9uczo6Q3JpdGVyaW9uLmNvdW50JywgMSBkbwogICAgICAgICAgYXNzZXJ0X2RpZmZlcmVuY2UgJ1NjcmVlbmluZ3M6OkRlY2lzaW9uczo6UnVsZS5jb3VudCcsIDIgZG8KICAgICAgICAgICAgYXNzZXJ0X2RpZmZlcmVuY2UgJ1NjcmVlbmluZ3M6OkRlY2lzaW9uczo6Q3JpbWluYWxPZmZlbnNlUnVsZS5jb3VudCcsIDAgZG8KICAgICAgICAgICAgICBmb3JtLnNhdmUhCiAgICAgICAgICAgIGVuZAogICAgICAgICAgZW5kCiAgICAgICAgZW5kCiAgICAgIGVuZAo=</text>
      </register>
      <register name="c" type="2">
        <text encoding="base64">ICAgICAgICAgIGZlbG9uaWVzX2NoZWNrYm94OiAnMScsCiAgICAgICAgICBtaXNkZW1lYW5vcnNfY2hlY2tib3g6ICcxJwo=</text>
      </register>
      <register name="d" type="4">
        <text>collectionDenyCheckboxSelector</text>
      </register>
      <register name="e" type="4">
        <text>valueDenyRowSelector</text>
      </register>
      <register name="f" type="4">
        <text>Timbuktu</text>
      </register>
      <register name="g" type="4">
        <text>OR</text>
      </register>
      <register name="h" type="4">
        <text>11122</text>
      </register>
      <register name="i" type="4">
        <text>WeaponOffenseRule</text>
      </register>
      <register name="-" type="4">
        <text>hash</text>
      </register>
      <register name="/" type="4">
        <text>INTO</text>
      </register>
      <register name="0" type="2">
        <text encoding="base64"></text>
      </register>
      <register name="1" type="2">
        <text encoding="base64"></text>
      </register>
      <register name="q" type="4">
        <text />
      </register>
      <register name="2" type="2">
        <text encoding="base64">Cg==</text>
      </register>
      <register name="3" type="2">
        <text encoding="base64">ICAgICAgICBwdWJsaWNfcmVjb3JkcyA9IEBzY3JlZW5pbmdfc3ViamVjdC5jcmVkaXRfcHJvZmlsZS5wdWJsaWNfcmVjb3Jkcy5tYXAgZG8gfHByfAogICAgICAgICAgUHVibGljUmVjb3JkRGVjb3JhdG9yLm5ldyhwcikKICAgICAgICBlbmQK</text>
      </register>
      <register name="4" type="2">
        <text encoding="base64">Cg==</text>
      </register>
      <register name="5" type="2">
        <text encoding="base64">ICAgICAgICBiYW5rcnVwdGNpZXMgPSBwdWJsaWNfcmVjb3Jkcy5zZWxlY3QoJjppc19iYW5rcnVwdGN5PykK</text>
      </register>
      <register name="6" type="2">
        <text encoding="base64">ZmlsZSA9IEZpbGUucmVhZCgnY3JpbWluYWxfb2ZmZW5zZXMuY3N2JykK</text>
      </register>
      <register name="7" type="2">
        <text encoding="base64">ICAgIAo=</text>
      </register>
      <register name="w" type="2">
        <text encoding="base64">ICAgICAgYXNzZXJ0X3JlcG9ydF9kYXRhX3NpemUgOSwgZmlsdGVycyBkbyB8cmVzdWx0c3wKICAgICAgICBhc3NlcnRfZXF1YWwgWyAnQTAxJywgJ0EyJywgJ0ExMScsICdCMTAnLCAnMScsICcyJywgJzMnLCAnMTAnLCAnMjAnIF0sIHJlc3VsdHMubWFwIHsgfHJ8IHJbQ05fVU5JVF9OQU1FXSB9CiAgICAgIGVuZAoKICAgICAgZmlsdGVyc1s6Y29sdW1uc11bOnNvcnRdWzpvcmRlcl0gPSAnREVTQycKCiAgICAgIGFzc2VydF9yZXBvcnRfZGF0YV9zaXplIDksIGZpbHRlcnMgZG8gfHJlc3VsdHN8CiAgICAgICAgYXNzZXJ0X2VxdWFsIFsnMjAnLCAnMTAnLCAnMycsICcyJywgJzEnLCAnQjEwJywgJ0ExMScsICdBMicsICdBMDEnXSwgcmVzdWx0cy5tYXAgeyB8cnwgcltDTl9VTklUX05BTUVdIH0KICAgICAgZW5kCg==</text>
      </register>
      <register name="8" type="2">
        <text encoding="base64">Cg==</text>
      </register>
      <register name="x" type="2">
        <text encoding="base64">ICBpbmNsdWRlIFdlYkNvbW1vbjo6Q29udHJvbGxlcnM6OkNhY2hlQ29udHJvbE1ldGhvZHMK</text>
      </register>
      <register name="9" type="2">
        <text encoding="base64">cm93ID0gQ1NWLnBhcnNlKGZpbGUsIGhlYWRlcnM6IHRydWUpCmFhYSA9IHt9Cg==</text>
      </register>
      <register name="y" type="2">
        <text encoding="base64">IyBmcm96ZW5fc3RyaW5nX2xpdGVyYWw6IHRydWUK</text>
      </register>
      <register name=":" type="4">
        <text encoding="base64">JzwsJz5zLzxzdHJvbmc+Ly9n</text>
      </register>
      <register name="z" type="4">
        <text>require 'pry'; binding.pry</text>
      </register>
    </registers>
    <search>
      <last-search>INTO</last-search>
      <last-offset />
      <last-pattern>INTO</last-pattern>
      <last-replace />
      <last-substitute encoding="base64">PHN0cm9uZz4=</last-substitute>
      <last-dir>1</last-dir>
      <show-last>false</show-last>
    </search>
    <history>
      <history-search>
        <entry encoding="base64">XDxmZWxvbnlfY3JpbWluYWxfb2ZmZW5zZV9ydWxlc19mb3JtXD4=</entry>
        <entry encoding="base64">XDxDcmltaW5hbE9mZmVuc2VSdWxlXD4=</entry>
        <entry>credit</entry>
        <entry>decision</entry>
        <entry>strong</entry>
        <entry encoding="base64">PC4qc3Ryb25nPg==</entry>
        <entry encoding="base64">PFwvc3Ryb25nPg==</entry>
        <entry encoding="base64">PHN0cm9uZz4=</entry>
        <entry>Deni</entry>
        <entry encoding="base64">XDxub19zaG93X29mZmVuc2VcPg==</entry>
        <entry>Fraud</entry>
        <entry encoding="base64">XDxub19vZmZlbnNlX2luZm9ybWF0aW9uX2ZvdW5kX29mZmVuc2VzXD4=</entry>
        <entry>tbd</entry>
        <entry>Intent</entry>
        <entry encoding="base64">XDxSRUdJU1RSWV9SRUNPUkRfVFlQRV9NQVBQSU5HU1w+</entry>
        <entry encoding="base64">XDxwcmVfZmlsdGVyX3NsaWNpbmdcPg==</entry>
        <entry>A CLASS</entry>
        <entry>OPER</entry>
        <entry>OPE</entry>
        <entry>INTO</entry>
      </history-search>
      <history-cmd>
        <entry encoding="base64">JzwsJz5zL2Rpc2NoYXJnZWRCYW5rcnVwdGN5L2NvbGxlY3Rpb25EZW55L2c=</entry>
        <entry encoding="base64">JzwsJz5zL0NvbGxlY3Rpb24vRXZpY3Rpb24vZw==</entry>
        <entry encoding="base64">JzwsJz5zL2NvbGxlY3Rpb24vZXZpY3Rpb24vZw==</entry>
        <entry encoding="base64">JzwsJz5zL2JhbmtydXB0Y3kvZXZpY3Rpb24vZw==</entry>
        <entry encoding="base64">JzwsJz5zL2FjY2VwdC9kZW55L2c=</entry>
        <entry encoding="base64">JzwsJz5zL2RlbnkvYWNjZXB0L2c=</entry>
        <entry encoding="base64">JzwsJz5zLy0vKy9n</entry>
        <entry encoding="base64">JzwsJz5zL2V2aWN0aW9uL2NyaW1pbmFsL2c=</entry>
        <entry encoding="base64">JzwsJz5zL2ZlbG9ueS9taXNkZW1lYW5vci9nYw==</entry>
        <entry encoding="base64">JzwsJz5zL2ZlbG9ueS9taXNkZW1lYW5vci9naQ==</entry>
        <entry encoding="base64">JzwsJz5zL2ZlbG9ueS9taXNkZW1lYW5vci9n</entry>
        <entry>w</entry>
        <entry encoding="base64">JzwsJz5zL2ZlbG9uaWVzL21pc2RlbWVhbm9ycy9n</entry>
        <entry encoding="base64">JzwsJz5zL21pc2RlbWVhbm9yL2ZlbG9ueS9n</entry>
        <entry encoding="base64">JzwsJz5zLzwvc3Ryb25nPi8vZw==</entry>
        <entry encoding="base64">JzwsJz5zLzwvL3N0cm9uZz4vL2c=</entry>
        <entry encoding="base64">JzwsJz5zLzwuKnN0cm9uZz4vL2c=</entry>
        <entry encoding="base64">cy88c3Ryb25nPi8vZw==</entry>
        <entry encoding="base64">JzwsJz5zLzxcL3N0cm9uZz4vL2c=</entry>
        <entry encoding="base64">JzwsJz5zLzxzdHJvbmc+Ly9n</entry>
      </history-cmd>
      <history-expr />
      <history-input />
    </history>
    <shortcut-conflicts>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed N</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed CLOSE_BRACKET</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed I</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed O</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed OPEN_BRACKET</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed H</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed W</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed G</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed B</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed F</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed V</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed R</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed E</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed Y</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed U</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed Q</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed A</text>
      </shortcut-conflict>
    </shortcut-conflicts>
    <editor>
      <key-repeat enabled="true" />
    </editor>
  </component>
</application>